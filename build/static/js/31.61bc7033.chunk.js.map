{"version":3,"sources":["pages/wbs-board/wbs-modal.js","pages/wbs-board/Board.js"],"names":["WbsModal","props","console","log","data","formWbsUpdate","useFormik","initialValues","title","status","description","start_date","end_date","hours_worked","progress","comments","deliverable","date_updated","validateOnChange","validateOnBlur","validate","values","errors","onSubmit","PUBLIC_API","put","id","then","res","success","swal","text","message","icon","onClose","show","toggle","size","closeButton","project","task_delivery_order","href","target","sub_task","className","name","onChange","handleChange","value","map","item","idx","type","onClick","handleSubmit","color","undefined","reporter","first_name","last_name","remaining_hours","WbsBoard","wbsList","useSelector","state","wbs","dispatch","useDispatch","useState","lanes","label","cards","boardData","setBoardData","React","useEffect","temp_data","forEach","element","push","toString","populate_data","currentLaneId","currentCardId","modal","setModal","modalData","setModalData","hideCardDeleteIcon","onCardClick","cardId","metadata","laneId","wbsId","find","style","backgroundColor","laneStyle","fetchWbsThunk"],"mappings":"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","file":"static/js/31.61bc7033.chunk.js","sourcesContent":["import { CContainer, CRow, CCol, CCard, CCardHeader, CCardBody, CForm, CLabel, CInput, CButton, CModal, CModalBody, CModalHeader, CModalFooter, CTextarea } from '@coreui/react';\r\nimport React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { form, useFormik } from 'formik';\r\nimport { PUBLIC_API } from '../../Config';\r\nimport swal from 'sweetalert';\r\n\r\nconst WbsModal = (props) => {\r\n    console.log('props data: ', props.data)\r\n    // const modalData = useSelector(state => state.wbs.data)\r\n\r\n    const wbsStatusArray = [{\r\n        \"title\": \"To Do\",\r\n        \"status\": 1\r\n    }, {\r\n        \"title\": \"Ongoing\",\r\n        \"status\": 2\r\n    }, {\r\n        \"title\": \"Done\",\r\n        \"status\": 3\r\n    }]\r\n\r\n    const updateWbs = (data) => {\r\n        console.log(\"formWbsUpdate:\", formWbsUpdate.values)\r\n        PUBLIC_API.put('wbs/update/' + props.data.id + '/', formWbsUpdate.values).then((res) => {\r\n            console.log('update result', res)\r\n            if (res.status == 200 && res.data.success == 'True') {\r\n                swal({\r\n                    title: \"Good job!\",\r\n                    text: res.data.message,\r\n                    icon: \"success\",\r\n                });\r\n                props.onClose()\r\n            }\r\n        })\r\n    }\r\n\r\n    const validateWbsCreateForm = (values) => {\r\n        const errors = {};\r\n        if (!values.title) errors.title = \"Title is required!\"\r\n        console.log(errors);\r\n        return errors;\r\n    }\r\n    const formWbsUpdate = useFormik({\r\n        initialValues: {\r\n            title: props.data.title,\r\n            status: props.data.status,\r\n            description: props.data.description,\r\n            start_date: props.data.start_date,\r\n            end_date: props.data.end_date,\r\n            hours_worked: props.data.hours_worked,\r\n            progress: props.data.progress,\r\n            comments: props.data.comments,\r\n            deliverable: props.data.deliverable,\r\n            date_updated: ''\r\n        },\r\n        validateOnChange: true,\r\n        validateOnBlur: true,\r\n        validate: validateWbsCreateForm,\r\n        onSubmit: (values) => updateWbs(values)\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <CModal show={props.show} onClose={props.toggle} size=\"xl\">\r\n                <CModalHeader closeButton>\r\n                    {props.data.project && props.data.project.task_delivery_order + \" > \"}\r\n                    {props.data.project && <a href=\"https://www.google.com\" target=\"_blank\">{props.data.project.sub_task}</a>}\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CRow>\r\n                        <div className=\"col-lg-8 mb-3 border-right\">\r\n                            <CForm>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-9 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Title\r\n                                        </CLabel>\r\n                                        <CInput id=\"title\" name=\"title\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.title} />\r\n                                    </div>\r\n                                    <div className=\"col-lg-3 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Status\r\n                                        </CLabel>\r\n                                        <select className=\"form-select\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.status}>\r\n                                            {wbsStatusArray.map((item, idx) => (\r\n                                                <option key={idx} value={item.status}>{item.title}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </div>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-12 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Descriptions\r\n                                        </CLabel>\r\n                                        <CTextarea id=\"description\" name=\"description\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.description}></CTextarea>\r\n                                    </div>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-6 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Start date\r\n                                        </CLabel>\r\n                                        <CInput id=\"start_date\" name=\"start_date\" type=\"date\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.start_date}></CInput>\r\n                                    </div>\r\n                                    <div className=\"col-lg-6 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            End date\r\n                                        </CLabel>\r\n                                        <CInput id=\"end_date\" name=\"end_date\" type=\"date\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.end_date}></CInput>\r\n                                    </div>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-6 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Hours worked\r\n                                        </CLabel>\r\n                                        <CInput id=\"hours_worked\" name=\"hours_worked\" type=\"number\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.hours_worked}></CInput>\r\n                                    </div>\r\n                                    <div className=\"col-lg-6 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Progress(%)\r\n                                        </CLabel>\r\n                                        <CInput id=\"progress\" name=\"progress\" type=\"number\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.progress}></CInput>\r\n                                    </div>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-12 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Comments\r\n                                        </CLabel>\r\n                                        <CTextarea id=\"comments\" name=\"comments\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.comments}></CTextarea>\r\n                                    </div>\r\n                                </CRow>\r\n                                <CRow>\r\n                                    <div className=\"col-lg-12 mb-3\">\r\n                                        <CLabel className=\"custom-label-wbs5\">\r\n                                            Deliverable\r\n                                        </CLabel>\r\n                                        <CInput id=\"deliverable\" name=\"deliverable\" className=\"custom-forminput-5\" onChange={formWbsUpdate.handleChange} value={formWbsUpdate.values.deliverable}></CInput>\r\n                                    </div>\r\n                                </CRow>\r\n                                <div>\r\n                                    <CButton type=\"button\" onClick={formWbsUpdate.handleSubmit} color=\"primary\">Update</CButton>{' '}\r\n                                    <CButton\r\n                                        color=\"secondary\"\r\n                                        onClick={props.toggle}\r\n                                    >Cancel</CButton>\r\n                                </div>\r\n                            </CForm>\r\n                        </div>\r\n                        <div className=\"col-lg-4 mb-3\">\r\n                            <div>\r\n                                <p>\r\n                                    Reporter:\r\n                                    <br></br>\r\n                                    {/* Pial Noman */}\r\n                                    {props.data.reporter?.first_name != undefined && props.data.reporter.first_name + \" \" + props.data.reporter.last_name}\r\n                                </p>\r\n                                <p>\r\n                                    Remaining hours:\r\n                                    <br></br>500\r\n                                    {props.data.reporter?.remaining_hours}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </CRow>\r\n                </CModalBody>\r\n            </CModal>\r\n        </>\r\n    )\r\n}\r\nexport default WbsModal;","import { CContainer, CRow, CCol, CCard, CCardHeader, CCardBody, CForm, CLabel, CInput, CButton, CModal, CModalBody, CModalHeader, CModalFooter } from '@coreui/react';\r\nimport React, { useState, useEffect } from 'react'\r\nimport './Board.css'\r\nimport Board from 'react-trello'\r\nimport WbsModal from './wbs-modal';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchWbsThunk } from '../../store/slices/WbsSlice';\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport CIcon from '@coreui/icons-react';\r\n\r\nconst WbsBoard = () => {\r\n    const wbsList = useSelector(state => state.wbs.data)\r\n    const dispatch=useDispatch()\r\n    const [boardData, setBoardData] = useState({\r\n        lanes: [\r\n            {\r\n                id: 'lane1',\r\n                title: 'TO DO',\r\n                label: '',\r\n                cards: []\r\n            },\r\n            {\r\n                id: 'lane2',\r\n                title: 'IN PROGRESS',\r\n                label: '',\r\n                cards: []\r\n            },\r\n            {\r\n                id: 'lane3',\r\n                title: 'DONE',\r\n                label: '',\r\n                cards: []\r\n            }\r\n        ]\r\n    })\r\n    const populate_data = () => {\r\n        console.log('populating data')\r\n        let temp_data = {\r\n            lanes: [\r\n                {\r\n                    id: 'lane1',\r\n                    title: 'TO DO',\r\n                    label: '',\r\n                    cards: []\r\n                },\r\n                {\r\n                    id: 'lane2',\r\n                    title: 'IN PROGRESS',\r\n                    label: '',\r\n                    cards: []\r\n                },\r\n                {\r\n                    id: 'lane3',\r\n                    title: 'DONE',\r\n                    label: '',\r\n                    cards: []\r\n                }\r\n            ]\r\n        }\r\n        if(wbsList!=undefined){\r\n            wbsList.forEach(element => {\r\n                if (element.status === 1) {\r\n                    // console.log(\"1st cond\", data.lanes[0])\r\n                    temp_data.lanes[0].cards.push({ \"id\": element.id.toString(), \"laneId\": \"lane1\", \"title\": element.title, \"description\": element.description, \"label\": \"★ \" + element.end_date })\r\n                    console.log('1', temp_data)\r\n                }\r\n                else if (element.status === 2) {\r\n                    // console.log(\"2nd cond\", temp_data.lanes[1])\r\n                    temp_data.lanes[1].cards.push({ \"id\": element.id.toString(), \"laneId\": \"lane2\", \"title\": element.title, \"description\": element.description, \"label\": \"★ \" + element.end_date })\r\n                    console.log('2', temp_data)\r\n                }\r\n                else if (element.status === 3) {\r\n                    // console.log(\"3rd cond\", temp_data.lanes[2])\r\n                    temp_data.lanes[2].cards.push({ \"id\": element.id.toString(), \"laneId\": \"lane3\", \"title\": element.title, \"description\": element.description, \"label\": \"★ \" + element.end_date })\r\n                    console.log('3', temp_data)\r\n                }\r\n            })\r\n        }\r\n        // console.log('temp data', temp_data)\r\n        setBoardData(temp_data)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        populate_data()\r\n    }, [wbsList])\r\n\r\n    const boardStyle = { backgroundColor: \"#fff\" };\r\n    const laneStyle = { backgroundColor: \"rgb(243 243 243)\" };\r\n    let currentLaneId, currentCardId = '';\r\n\r\n    const editWbs = (cardId, metadata, laneId) => {\r\n        // console.log(\"WBS edit: \", cardId, metadata, laneId);\r\n        currentLaneId = laneId;\r\n        currentCardId = cardId;\r\n        // console.log(data.lanes.find(element => element.id == currentLaneId).cards.find(element => element.id == currentCardId).title)\r\n        const wbsId = (boardData.lanes.find(element => element.id == currentLaneId).cards.find(element => element.id == currentCardId)).id;\r\n        setModalData(wbsList.find(element => element.id == wbsId));\r\n        setModal(true);\r\n    }\r\n\r\n    const [modal, setModal] = useState(false);\r\n    const [modalData, setModalData] = useState(null);\r\n\r\n    const toggle = () => {\r\n        setModalData(null);\r\n        setModal(!modal);\r\n    }\r\n    const onWbsUpdate=()=>{\r\n        setModal(false)\r\n        dispatch(fetchWbsThunk(5))\r\n        setModalData(null);\r\n    }\r\n    return (\r\n        <>\r\n            <Board data={boardData} hideCardDeleteIcon onCardClick={editWbs} style={boardStyle} laneStyle={laneStyle} />\r\n            {modalData!=null && <WbsModal show={modal} onClose={onWbsUpdate} toggle={toggle} data={modalData}></WbsModal>}\r\n        </>\r\n    )\r\n\r\n}\r\nexport default WbsBoard;"],"sourceRoot":""}