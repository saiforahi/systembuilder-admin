{"version":3,"sources":["../node_modules/@material-ui/icons/VideoCall.js","pages/jitsi/JitsiMeet.js","pages/meetings/Meetings.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","JitsiComponent","props","domain","api","startMeet","options","roomName","state","room","width","height","configOverwrite","prejoinPageEnabled","interfaceConfigOverwrite","parentNode","document","querySelector","userInfo","displayName","user","name","window","JitsiMeetExternalAPI","addEventListeners","readyToClose","handleClose","participantLeft","handleParticipantLeft","participantJoined","handleParticipantJoined","videoConferenceJoined","handleVideoConferenceJoined","videoConferenceLeft","handleVideoConferenceLeft","audioMuteStatusChanged","handleMuteStatus","videoMuteStatusChanged","handleVideoStatus","console","log","participant","a","getParticipants","onMeetingClose","audio","video","username","isAudioMuted","isVideoMuted","Promise","resolve","reject","setTimeout","getParticipantsInfo","command","this","executeCommand","history","push","setState","alert","id","class","onClick","className","title","Component","OurMeetings","useState","meeting","setMeeting","setRoomName","password","setPassword","create_meeting","val","formMeeting","setValues","useFormik","initialValues","userName","validateOnChange","validateOnBlur","validate","values","errors","org","onSubmit","JitsiMeet","disabled","htmlFor","type","onChange","event","target","handleChange","touched","handleSubmit"],"mappings":"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","file":"static/js/28.8b7cf0b0.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4zM14 13h-3v3H9v-3H6v-2h3V8h2v3h3v2z\"\n}), 'VideoCall');\n\nexports.default = _default;","import React, { Component } from 'react';\r\n\r\nclass JitsiComponent extends Component {\r\n    domain = 'meet.jit.si';\r\n    api = {};\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            room: this.props.roomName,\r\n            user: {\r\n                name: this.props.username\r\n            },\r\n            isAudioMuted: false,\r\n            isVideoMuted: false\r\n        }\r\n    }\r\n\r\n    startMeet = () => {\r\n        const options = {\r\n            roomName: this.state.room,\r\n            width: '100%',\r\n            height: 500,\r\n            configOverwrite: { prejoinPageEnabled: false },\r\n            interfaceConfigOverwrite: {\r\n                // overwrite interface properties\r\n            },\r\n            parentNode: document.querySelector('#jitsi-iframe'),\r\n            userInfo: {\r\n                displayName: this.state.user.name\r\n            }\r\n        }\r\n        this.api = new window.JitsiMeetExternalAPI(this.domain, options);\r\n\r\n        this.api.addEventListeners({\r\n            readyToClose: this.handleClose,\r\n            participantLeft: this.handleParticipantLeft,\r\n            participantJoined: this.handleParticipantJoined,\r\n            videoConferenceJoined: this.handleVideoConferenceJoined,\r\n            videoConferenceLeft: this.handleVideoConferenceLeft,\r\n            audioMuteStatusChanged: this.handleMuteStatus,\r\n            videoMuteStatusChanged: this.handleVideoStatus\r\n        });\r\n    }\r\n\r\n    handleClose = () => {\r\n        console.log(\"handleClose\");\r\n        // this.props.onMeetingClose()\r\n    }\r\n\r\n    handleParticipantLeft = async (participant) => {\r\n        console.log(\"handleParticipantLeft\", participant); // { id: \"2baa184e\" }\r\n        const data = await this.getParticipants();\r\n    }\r\n\r\n    handleParticipantJoined = async (participant) => {\r\n        console.log(\"handleParticipantJoined\", participant); // { id: \"2baa184e\", displayName: \"Shanu Verma\", formattedDisplayName: \"Shanu Verma\" }\r\n        const data = await this.getParticipants();\r\n    }\r\n\r\n    handleVideoConferenceJoined = async (participant) => {\r\n        console.log(\"handleVideoConferenceJoined\", participant); // { roomName: \"bwb-bfqi-vmh\", id: \"8c35a951\", displayName: \"Akash Verma\", formattedDisplayName: \"Akash Verma (me)\"}\r\n        const data = await this.getParticipants();\r\n    }\r\n\r\n    handleVideoConferenceLeft = () => {\r\n        console.log(\"handleVideoConferenceLeft\");\r\n        this.props.onMeetingClose()\r\n    }\r\n\r\n    handleMuteStatus = (audio) => {\r\n        console.log(\"handleMuteStatus\", audio); // { muted: true }\r\n    }\r\n\r\n    handleVideoStatus = (video) => {\r\n        console.log(\"handleVideoStatus\", video); // { muted: true }\r\n    }\r\n\r\n    getParticipants() {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                resolve(this.api.getParticipantsInfo()); // get all participants\r\n            }, 500)\r\n        });\r\n    }\r\n\r\n    // custom events\r\n    executeCommand(command) {\r\n        this.api.executeCommand(command);;\r\n        if(command == 'hangup') {\r\n            return this.props.history.push('/dashboard/meetings');\r\n        }\r\n\r\n        if(command == 'toggleAudio') {\r\n            this.setState({ isAudioMuted: !this.state.isAudioMuted });\r\n        }\r\n\r\n        if(command == 'toggleVideo') {\r\n            this.setState({ isVideoMuted: !this.state.isVideoMuted });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (window.JitsiMeetExternalAPI) {\r\n            this.startMeet();\r\n        } else {\r\n            alert('JitsiMeetExternalAPI not loaded');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isAudioMuted, isVideoMuted } = this.state;\r\n        return (\r\n            <>\r\n            {/* <header className=\"nav-bar\">\r\n                <p className=\"item-left heading\">Jitsi React</p>\r\n            </header> */}\r\n            <div id=\"jitsi-iframe\"></div>\r\n            <div class=\"item-center\">\r\n                <span>Custom Controls</span>\r\n            </div>\r\n            <div class=\"item-center\">\r\n                <span>&nbsp;&nbsp;</span>\r\n                <i onClick={ () => this.executeCommand('toggleAudio') } className={`fas fa-2x grey-color ${isAudioMuted ? 'fa-microphone-slash' : 'fa-microphone'}`} aria-hidden=\"true\" title=\"Mute / Unmute\"></i>\r\n                <i onClick={ () => this.executeCommand('hangup') } className=\"fas fa-phone-slash fa-2x red-color\" aria-hidden=\"true\" title=\"Leave\"></i>\r\n                <i onClick={ () => this.executeCommand('toggleVideo') } className={`fas fa-2x grey-color ${isVideoMuted ? 'fa-video-slash' : 'fa-video'}`} aria-hidden=\"true\" title=\"Start / Stop camera\"></i>\r\n                <i onClick={ () => this.executeCommand('toggleShareScreen') } className=\"fas fa-film fa-2x grey-color\" aria-hidden=\"true\" title=\"Share your screen\"></i>\r\n            </div>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JitsiComponent;","import { CContainer, CRow, CCol, CCard, CCardBody, CButton, CInput, CForm, CLabel, CSelect } from '@coreui/react';\r\nimport { React, useState } from 'react';\r\nimport VideoCallIcon from '@material-ui/icons/VideoCall';\r\nimport './meetings.css';\r\nimport JitsiMeet from '../jitsi/JitsiMeet'\r\nimport { useFormik } from 'formik'\r\n\r\nconst OurMeetings = () => {\r\n    const [meeting,setMeeting]=useState(false)\r\n    const [roomName,setRoomName]=useState('')\r\n    const [username,setUserName] = useState('')\r\n    const [password,setPassword] = useState('')\r\n    const reset_form=()=>{\r\n        setRoomName(\"\")\r\n        formMeeting.setValues({\r\n            \"roomName\":\"\"\r\n        })\r\n    }\r\n    const create_meeting=(val)=>{\r\n        switch(val){\r\n            case true:\r\n                setMeeting(val)\r\n                break\r\n            case false:\r\n                reset_form()\r\n                setMeeting(val)\r\n                break\r\n        }\r\n        setMeeting(val)\r\n    }\r\n    const validateMeetForm = (values) => {\r\n        const errors = {};\r\n        if (!values.roomName) errors.org = \"Room Name is required!\";\r\n        //if (!values.userName) errors.post = \"User Name is required!\";\r\n        return errors;\r\n    }\r\n    const createRoom=(values)=>{\r\n        setMeeting(true)\r\n    }\r\n    const formMeeting = useFormik({\r\n        initialValues: {\r\n            roomName: '',\r\n            userName: '',\r\n            password: '',\r\n        },\r\n        validateOnChange: true,\r\n        validateOnBlur: true,\r\n        validate: validateMeetForm,\r\n        onSubmit: createRoom,\r\n    })\r\n    return (\r\n        <>\r\n            <CContainer>\r\n                {!meeting ? (\r\n                <div className=\"row\">\r\n                    {/**Upcoming meetings */}\r\n                    <div className=\"col-md-12 col-lg-4 offset-lg-1\">\r\n                        <h4 className=\"section-name\">Meetings</h4>\r\n                        {/*Meeting list */}\r\n                        <div>\r\n                            <CCard className=\"meeting-cards\">\r\n                                <CCardBody>\r\n                                    <div className=\"d-flex\">\r\n                                        <div className=\"icon-holder\">\r\n                                            <VideoCallIcon className=\"videoIcon\" />\r\n                                        </div>\r\n                                        <div>\r\n                                            <h6 className=\"meeting-id\">Meeting ID: #677465</h6>\r\n                                            <h5 className=\"projectName\">Virtual Office</h5>\r\n                                            <div className=\"join-btn-holder\"><CButton className=\"meeting-join-btn\">Join</CButton></div>\r\n                                        </div>\r\n                                    </div>\r\n                                </CCardBody>\r\n                            </CCard>\r\n                            {/**dummy cards,remove after dynamic */}\r\n                        </div> \r\n                        </div>\r\n                    {/**create a new meeting */}\r\n                    <div className=\"col-md-12 col-lg-6\" >\r\n                   \r\n                        <h4 className=\"section-name\">Create a new meeting</h4>\r\n                        {/**create that meeting!! */}\r\n                        <CCard className=\"meeting-creator-form\">\r\n                            <CCardBody>\r\n                                <CForm>\r\n                                    {/**Project Name */}\r\n                                    <div className=\"mb-3\">\r\n                                        <CLabel className=\"custom-label-5\">Project Name</CLabel>\r\n                                        <CSelect aria-label=\"Default select example\" className=\"custom-forminput-6\">\r\n                                            <option disabled>Open this select menu</option>\r\n                                            <option value=\"1\">One</option>\r\n                                            <option value=\"2\">Two</option>\r\n                                            <option value=\"3\">Three</option>\r\n                                        </CSelect>\r\n                                    </div>\r\n                                    {/**host name */}\r\n                                    <div className=\"mb-3\">\r\n                                        <CLabel\r\n                                            htmlFor=\"hostName\"\r\n                                            className=\"custom-label-5\"\r\n                                        >Host</CLabel>\r\n                                        <CInput type=\"text\" id=\"hostName\" className=\"custom-forminput-6\" />\r\n\r\n                                    </div>\r\n                                    {/*agenda*/}\r\n                                    <div className=\"mb-3\">\r\n                                        <CLabel\r\n                                            htmlFor=\"agendaItem\"\r\n                                            className=\"custom-label-5\"\r\n                                        >Meeting Agenda</CLabel>\r\n                                        <CInput type=\"text\" id=\"agendaItem\" className=\"custom-forminput-6\" />\r\n\r\n                                    </div>\r\n                                    {/*room name*/}\r\n                                    <div className=\"mb-3\">\r\n                                        <CLabel\r\n                                            htmlFor=\"roomItem\"\r\n                                            className=\"custom-label-5\"\r\n                                        >Room Name</CLabel>\r\n                                        <CInput \r\n                                            type=\"text\" \r\n                                            id=\"roomName\" \r\n                                            name=\"roomName\"\r\n                                            className=\"custom-forminput-6\" \r\n                                            value={roomName} \r\n                                            onChange={(event)=>{setRoomName(event.target.value);formMeeting.handleChange(event)}}\r\n                                        />\r\n                                        {(formMeeting.errors.roomName || formMeeting.touched.roomName) ? (<p className=\"error\">Room Name invalid</p>):''}\r\n                                    </div>\r\n                                    {/**password */}\r\n                                    <div className=\"mb-3\">\r\n                                        <CLabel\r\n                                            htmlFor=\"exampleInputPassword1\"\r\n                                            className=\"custom-label-5\"\r\n                                        >\r\n                                            Password\r\n                                        </CLabel>\r\n                                        <CInput\r\n                                            type=\"password\"\r\n                                            id=\"exampleInputPassword1\"\r\n                                            className=\"custom-forminput-6\"\r\n                                            value={password} onChange={(event)=>setPassword(event.target.value)}\r\n                                        />\r\n\r\n                                    </div>\r\n                                    {/**submit button */}\r\n                                    <div className=\"mb-3 create-meet-btn-holder\">\r\n                                        <CButton className=\"create-meeting-btn\" type=\"button\" onClick={formMeeting.handleSubmit}>Create Meeting</CButton>\r\n                                    </div>\r\n\r\n                                </CForm>\r\n                            </CCardBody>\r\n                        </CCard>\r\n                        </div>\r\n                    </div>):\r\n                (<CRow>\r\n                    <JitsiMeet roomName={roomName} username=\"Shaif\" onMeetingClose={()=>create_meeting(false)}/>\r\n                </CRow>)}\r\n            </CContainer>\r\n        </>\r\n    )\r\n}\r\nexport default OurMeetings;\r\n"],"sourceRoot":""}